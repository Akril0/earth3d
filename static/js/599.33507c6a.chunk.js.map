{"version":3,"file":"static/js/599.33507c6a.chunk.js","mappings":"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","sources":["components/Globe.tsx","components/ParticleMesh.tsx","components/Particles.tsx","components/StaticRectAreaLight.tsx","components/GlobeScene.tsx","hooks/frameHooks.ts"],"sourcesContent":["import {\r\n    DoubleSide,\r\n    MeshStandardMaterial,\r\n    TextureLoader\r\n} from \"three\";\r\nimport {useLoader} from \"@react-three/fiber\";\r\nimport globeTexture from '../assets/img/globe_texture.webp'\r\nimport React, {useRef} from \"react\";\r\n\r\n\r\n\r\nconst Globe = () => {\r\n    const standardMaterialRef = useRef<MeshStandardMaterial>(null);\r\n    const globe = useLoader(TextureLoader, globeTexture);\r\n\r\n    return (\r\n        <group>\r\n            <mesh castShadow={false}\r\n                  receiveShadow={false}\r\n            >\r\n                <sphereGeometry\r\n                    args={[2.94, 64, 64]}/>\r\n\r\n                <meshStandardMaterial\r\n                    ref={standardMaterialRef}\r\n                    map={globe}\r\n                    transparent={true}\r\n                    side={DoubleSide}\r\n                />\r\n            </mesh>\r\n        </group>\r\n    );\r\n};\r\n\r\nexport default Globe;\r\n","import * as THREE from \"three\";\r\nimport React, {useEffect, useMemo, useRef} from \"react\";\r\nimport {ParticleMeshProps} from \"../types/planet/particles\";\r\n\r\n\r\nconst ParticleMesh: React.FC<ParticleMeshProps> = (props) => {\r\n\r\n\r\n    const dummy = useMemo(() => new THREE.Object3D(), []);\r\n\r\n    const meshRef = useRef<THREE.InstancedMesh>(null);\r\n\r\n    useEffect(() => {\r\n        if (meshRef.current) {\r\n            props.particles.forEach((particle, i) => {\r\n                dummy.position.set(particle.position.x, particle.position.y, particle.position.z);\r\n                dummy.lookAt(new THREE.Vector3(0, 0, 0));\r\n                dummy.updateMatrix();\r\n                meshRef.current!.setMatrixAt(i, dummy.matrix);\r\n\r\n            })\r\n            meshRef.current.instanceMatrix.needsUpdate = true;\r\n        }\r\n    }, [dummy, props.particles]);\r\n\r\n    return (\r\n        <instancedMesh\r\n            castShadow={false}\r\n            args={[props.geometry, props.material, props.particles.length]}\r\n            ref={meshRef}\r\n        />\r\n    )\r\n\r\n}\r\n\r\nexport default ParticleMesh;","import React, {\r\n    useMemo,\r\n} from 'react';\r\nimport particles3\r\n    from \"../data/continent_particles3.json\";\r\nimport particles1\r\n    from '../data/continent_particles1.json';\r\nimport particles2\r\n    from '../data/continent_particles2.json';\r\nimport particles4\r\n    from '../data/continent_particles4.json'\r\nimport orbit_particles\r\n    from '../data/orbit_particles.json'\r\nimport * as THREE from \"three\";\r\nimport ParticleMesh from \"./ParticleMesh\";\r\n\r\n\r\n\r\n\r\nexport const Particles1 = () => {\r\n\r\n    const geometry = useMemo(() => new THREE.CircleGeometry(0.01, 6), []);\r\n    const material = useMemo(() => new THREE.MeshBasicMaterial({\r\n        color: 'white',\r\n        side: 2\r\n    }), []);\r\n\r\n\r\n    return (\r\n        <group>\r\n            <ParticleMesh\r\n                geometry={geometry}\r\n                material={material}\r\n                particles={particles1}\r\n            />\r\n        </group>\r\n    );\r\n};\r\n\r\nexport const Particles2 = () => {\r\n\r\n\r\n    const geometry = useMemo(() => new THREE.CircleGeometry(0.008, 6), []);\r\n    const material = useMemo(() => new THREE.MeshBasicMaterial({\r\n        color: '#89639A',\r\n        side: 2\r\n    }), []);\r\n\r\n    return (\r\n        <group>\r\n            <ParticleMesh\r\n                geometry={geometry}\r\n                material={material}\r\n                particles={particles2}\r\n            />\r\n\r\n        </group>\r\n    );\r\n};\r\nexport const Particles3 = () => {\r\n\r\n\r\n\r\n    const geometry = useMemo(() => new THREE.CircleGeometry(0.007, 6), []);\r\n    const material = useMemo(() => new THREE.MeshBasicMaterial({\r\n        color: '#B45ADB',\r\n        side: 2,\r\n    }), []);\r\n\r\n    return (\r\n        <group scale={1.01}>\r\n            <ParticleMesh\r\n                geometry={geometry}\r\n                material={material}\r\n                particles={particles3}\r\n            />\r\n        </group>\r\n    );\r\n};\r\n\r\n\r\nexport const Particles4 = () => {\r\n\r\n    const geometry = useMemo(() => new THREE.CircleGeometry(0.007, 6), []);\r\n    const material = useMemo(() => new THREE.MeshBasicMaterial({\r\n        color: '#B45ADB',\r\n        side: 2\r\n    }), []);\r\n\r\n    return (\r\n        <group>\r\n            <ParticleMesh\r\n                geometry={geometry}\r\n                material={material}\r\n                particles={particles4}\r\n            />\r\n        </group>\r\n    );\r\n};\r\n\r\nexport const OrbitParticles = () => {\r\n\r\n    const geometry = useMemo(() => new THREE.CircleGeometry(0.007, 6), []);\r\n    const material = useMemo(() => new THREE.MeshBasicMaterial({\r\n        color: '#AE99FF',\r\n        side: 2,\r\n    }), []);\r\n    return (\r\n        <group>\r\n            <ParticleMesh\r\n                geometry={geometry}\r\n                material={material}\r\n                particles={orbit_particles}\r\n            />\r\n        </group>\r\n    );\r\n};","import {\r\n    RectAreaLightUniformsLib\r\n} from \"three/examples/jsm/lights/RectAreaLightUniformsLib\";\r\nimport React, { useEffect, useRef} from \"react\";\r\nimport * as THREE from \"three\";\r\nimport {\r\n    StaticRectAreaLightProps\r\n} from \"../types/planet/rectLight\";\r\n\r\nRectAreaLightUniformsLib.init();\r\n\r\nconst StaticRectAreaLight: React.FC<StaticRectAreaLightProps> = ({targetRef}) => {\r\n    const lightRef = useRef<THREE.RectAreaLight>(null);\r\n\r\n    useEffect(() => {\r\n        if (lightRef.current && targetRef.current) {\r\n            const targetPosition = new THREE.Vector3();\r\n            targetRef.current.getWorldPosition(targetPosition);\r\n\r\n            lightRef.current.lookAt(targetPosition);\r\n        }\r\n    }, [targetRef]);\r\n\r\n    return (\r\n        <rectAreaLight\r\n            ref={lightRef}\r\n            width={6}\r\n            height={6}\r\n            intensity={30}\r\n            color={new THREE.Color(0x662083)}\r\n            position={[-2.2, 2.2, 0]}\r\n            castShadow\r\n        />\r\n    );\r\n};\r\n\r\nexport default StaticRectAreaLight;","import React, {\r\n    useRef,\r\n} from 'react';\r\nimport * as THREE from 'three';\r\nimport Globe from \"./Globe\";\r\nimport {\r\n    OrbitParticles,\r\n    Particles1, Particles2, Particles3, Particles4,\r\n} from \"./Particles\";\r\nimport StaticRectAreaLight from \"./StaticRectAreaLight\";\r\nimport {useThirtyFrame} from \"../hooks/frameHooks\";\r\n\r\n\r\nconst GlobeScene = () => {\r\n\r\n    const scrollGroupRef = useRef<THREE.Group>(null);\r\n    const groupRef = useRef<THREE.Group>(null);\r\n\r\n    useThirtyFrame(() => {\r\n        if (groupRef.current) {\r\n            groupRef.current.rotation.y += 0.002; // Вращение группы частиц вместе с планетой\r\n        }\r\n    })\r\n\r\n    return (\r\n        <group position={[0,0,0]}\r\n               ref={scrollGroupRef}\r\n\r\n        >\r\n            <StaticRectAreaLight targetRef={groupRef}/>\r\n            <group\r\n                ref={groupRef}\r\n                rotation={[0, 3, 0]}>\r\n\r\n                <group\r\n                    scale={[1, 1.03, 1]}\r\n                >\r\n                    <Particles1/>\r\n                    <Particles2/>\r\n                    <Particles3/>\r\n                    <Particles4/>\r\n                    <OrbitParticles/>\r\n                    <Globe/>\r\n                </group>\r\n            </group>\r\n        </group>\r\n\r\n    );\r\n};\r\n\r\nexport default GlobeScene;\r\n\r\n\r\n","import {useFrame} from \"@react-three/fiber\";\r\n\r\ntype FrameCallback = () => void;\r\nexport const useThirtyFrame = (callBack: FrameCallback) => {\r\n    let lastFrameTime = 0;\r\n    const desiredFPS = 24;\r\n    const frameDuration = 1000 / desiredFPS;\r\n\r\n    return useFrame((state) => {\r\n\r\n        const currentTime = state.clock.getElapsedTime() * 1000;\r\n\r\n        if (currentTime - lastFrameTime >= frameDuration) {\r\n            lastFrameTime = currentTime;\r\n            callBack();\r\n        }\r\n    })\r\n}"],"names":["Globe","standardMaterialRef","useRef","globe","useLoader","TextureLoader","globeTexture","_jsx","children","_jsxs","castShadow","receiveShadow","args","ref","map","transparent","side","DoubleSide","props","dummy","useMemo","THREE","meshRef","useEffect","current","particles","forEach","particle","i","position","set","x","y","z","lookAt","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate","geometry","material","length","Particles1","color","ParticleMesh","particles1","Particles2","particles2","Particles3","scale","particles3","Particles4","particles4","OrbitParticles","orbit_particles","RectAreaLightUniformsLib","init","_ref","targetRef","lightRef","targetPosition","getWorldPosition","width","height","intensity","GlobeScene","scrollGroupRef","groupRef","callBack","lastFrameTime","frameDuration","useFrame","state","currentTime","clock","getElapsedTime","useThirtyFrame","rotation","StaticRectAreaLight"],"sourceRoot":""}